/*
 JustMock Lite
 Copyright © 2010-2014 Progress Software Corporation

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="TextBuilder.include"#>

<#
	int count = 16;
#>

/*  Auto generated */

using System;
using System.Collections.Generic;
using Telerik.JustMock.Core;

namespace Telerik.JustMock
{
	public partial class Args
	{
<# for (var i = 1; i <= count; ++i) { #>
		/// <summary>
		/// Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
		/// </summary>
<# for (var j = 1; j <= i; ++j) { #>
		/// <typeparam name="T<#= j #>">Type of the <#= GetNumberNames()[j-1] #> parameter of the anonymous method that this delegate encapsulates</typeparam>
<# } #>
		public static Args Matching<<#= String.Join(", ", Enumerable.Range(1, i).Select(t => "T" + t)) #>>(Func<<#= String.Join("", Enumerable.Range(1, i).Select(t => "T" + t + ", ")) #>bool> predicate)
		{
			return ProfilerInterceptor.GuardInternal(() => new Args().AndMatching(predicate));
		}

		/// <summary>
		/// Specifies a condition on the invocation arguments. See <see cref="M:Telerik.JustMock.Args.Filter"/> for usage details.
		/// </summary>
<# for (var j = 1; j <= i; ++j) { #>
		/// <typeparam name="T<#= j #>">Type of the <#= GetNumberNames()[j-1] #> parameter of the anonymous method that this delegate encapsulates</typeparam>
<# } #>
		public Args AndMatching<<#= String.Join(", ", Enumerable.Range(1, i).Select(t => "T" + t)) #>>(Func<<#= String.Join("", Enumerable.Range(1, i).Select(t => "T" + t + ", ")) #>bool> predicate)
		{
			return ProfilerInterceptor.GuardInternal(() =>
			{
				this.Filter = predicate;
				return this;
			});
		}

<# } #>
	}
}
